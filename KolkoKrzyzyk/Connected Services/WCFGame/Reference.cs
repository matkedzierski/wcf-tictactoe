//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TicTacToe.WCFGame {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCFGame.IGameService")]
    public interface IGameService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/Start", ReplyAction="http://tempuri.org/IGameService/StartResponse")]
        void Start();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/Start", ReplyAction="http://tempuri.org/IGameService/StartResponse")]
        System.Threading.Tasks.Task StartAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/Move", ReplyAction="http://tempuri.org/IGameService/MoveResponse")]
        TicTacToe.WCFGame.MoveResponse Move(TicTacToe.WCFGame.MoveRequest request);
        
        // CODEGEN: Trwa generowanie kontraktu komunikatu, ponieważ operacja ma wiele wartości zwracanych.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/Move", ReplyAction="http://tempuri.org/IGameService/MoveResponse")]
        System.Threading.Tasks.Task<TicTacToe.WCFGame.MoveResponse> MoveAsync(TicTacToe.WCFGame.MoveRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/CheckWin", ReplyAction="http://tempuri.org/IGameService/CheckWinResponse")]
        int CheckWin(int row, int column);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/CheckWin", ReplyAction="http://tempuri.org/IGameService/CheckWinResponse")]
        System.Threading.Tasks.Task<int> CheckWinAsync(int row, int column);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Move", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class MoveRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int row;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int col;
        
        public MoveRequest() {
        }
        
        public MoveRequest(int row, int col) {
            this.row = row;
            this.col = col;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MoveResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class MoveResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool MoveResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int serverRow;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int serverCol;
        
        public MoveResponse() {
        }
        
        public MoveResponse(bool MoveResult, int serverRow, int serverCol) {
            this.MoveResult = MoveResult;
            this.serverRow = serverRow;
            this.serverCol = serverCol;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServiceChannel : TicTacToe.WCFGame.IGameService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameServiceClient : System.ServiceModel.ClientBase<TicTacToe.WCFGame.IGameService>, TicTacToe.WCFGame.IGameService {
        
        public GameServiceClient() {
        }
        
        public GameServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GameServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Start() {
            base.Channel.Start();
        }
        
        public System.Threading.Tasks.Task StartAsync() {
            return base.Channel.StartAsync();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TicTacToe.WCFGame.MoveResponse TicTacToe.WCFGame.IGameService.Move(TicTacToe.WCFGame.MoveRequest request) {
            return base.Channel.Move(request);
        }
        
        public bool Move(int row, int col, out int serverRow, out int serverCol) {
            TicTacToe.WCFGame.MoveRequest inValue = new TicTacToe.WCFGame.MoveRequest();
            inValue.row = row;
            inValue.col = col;
            TicTacToe.WCFGame.MoveResponse retVal = ((TicTacToe.WCFGame.IGameService)(this)).Move(inValue);
            serverRow = retVal.serverRow;
            serverCol = retVal.serverCol;
            return retVal.MoveResult;
        }
        
        public System.Threading.Tasks.Task<TicTacToe.WCFGame.MoveResponse> MoveAsync(TicTacToe.WCFGame.MoveRequest request) {
            return base.Channel.MoveAsync(request);
        }
        
        public int CheckWin(int row, int column) {
            return base.Channel.CheckWin(row, column);
        }
        
        public System.Threading.Tasks.Task<int> CheckWinAsync(int row, int column) {
            return base.Channel.CheckWinAsync(row, column);
        }
    }
}
